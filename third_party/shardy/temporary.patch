diff --git a/third_party/llvm/generated.patch b/third_party/llvm/generated.patch
index 4f8ac49..d502ea7 100644
--- a/third_party/llvm/generated.patch
+++ b/third_party/llvm/generated.patch
@@ -1,42 +1,36 @@
 Auto generated patch. Do not edit or delete it, even if empty.
-diff -ruN --strip-trailing-cr a/clang/docs/ReleaseNotes.rst b/clang/docs/ReleaseNotes.rst
---- a/clang/docs/ReleaseNotes.rst
-+++ b/clang/docs/ReleaseNotes.rst
-@@ -796,7 +796,6 @@
- - Fixed an assertion failure caused by mangled names with invalid identifiers. (#GH112205)
- - Fixed an incorrect lambda scope of generic lambdas that caused Clang to crash when computing potential lambda
-   captures at the end of a full expression. (#GH115931)
--- Clang no longer rejects deleting a pointer of incomplete enumeration type. (#GH99278)
+diff -ruN --strip-trailing-cr a/clang/test/CodeGen/AArch64/fixed-register-global.c b/clang/test/CodeGen/AArch64/fixed-register-global.c
+--- a/clang/test/CodeGen/AArch64/fixed-register-global.c
++++ b/clang/test/CodeGen/AArch64/fixed-register-global.c
+@@ -2,13 +2,13 @@
+ /// Regression test for #76426, #109778
+ // REQUIRES: aarch64-registered-target
  
- Bug Fixes to AST Handling
- ^^^^^^^^^^^^^^^^^^^^^^^^^
-diff -ruN --strip-trailing-cr a/clang/lib/Sema/SemaExprCXX.cpp b/clang/lib/Sema/SemaExprCXX.cpp
---- a/clang/lib/Sema/SemaExprCXX.cpp
-+++ b/clang/lib/Sema/SemaExprCXX.cpp
-@@ -3747,8 +3747,7 @@
-     } else if (!Pointee->isDependentType()) {
-       // FIXME: This can result in errors if the definition was imported from a
-       // module but is hidden.
--      if (!Pointee->isStructureOrClassType() ||
--          !RequireCompleteType(StartLoc, Pointee,
-+      if (!RequireCompleteType(StartLoc, Pointee,
-                                LangOpts.CPlusPlus26
-                                    ? diag::err_delete_incomplete
-                                    : diag::warn_delete_incomplete,
-diff -ruN --strip-trailing-cr a/clang/test/SemaCXX/new-delete.cpp b/clang/test/SemaCXX/new-delete.cpp
---- a/clang/test/SemaCXX/new-delete.cpp
-+++ b/clang/test/SemaCXX/new-delete.cpp
-@@ -540,13 +540,6 @@
-   void f(A *x) { delete x; } // expected-warning {{delete called on 'PR10504::A' that is abstract but has non-virtual destructor}}
- }
+-// RUN: %clang -c --target=aarch64-none-gnu -ffixed-x15 %s 2>&1 | count 0
++// RUN: %clang -c --target=aarch64-none-gnu -ffixed-x15 %s -o /dev/null 2>&1 | count 0
  
--#if __cplusplus >= 201103L
--enum GH99278_1 {
--    zero = decltype(delete static_cast<GH99278_1*>(nullptr), 0){}
--    // expected-warning@-1 {{expression with side effects has no effect in an unevaluated context}}
--};
--#endif
--
- struct PlacementArg {};
- inline void *operator new[](size_t, const PlacementArg &) throw () {
-   return 0;
+-// RUN: not %clang -c --target=aarch64-none-gnu %s 2>&1 | \
++// RUN: not %clang -c --target=aarch64-none-gnu %s -o /dev/null 2>&1 | \
+ // RUN:   FileCheck %s --check-prefix=ERR_INVREG
+ // ERR_INVREG: error: register 'x15' unsuitable for global register variables on this target
+ 
+-// RUN: not %clang -c --target=aarch64-none-gnu -ffixed-x15 -DTYPE=short %s 2>&1 | \
++// RUN: not %clang -c --target=aarch64-none-gnu -ffixed-x15 -DTYPE=short %s -o /dev/null 2>&1 | \
+ // RUN:   FileCheck %s --check-prefix=ERR_SIZE
+ // ERR_SIZE: error: size of register 'x15' does not match variable size
+ 
+diff -ruN --strip-trailing-cr a/clang/test/Driver/config-file.c b/clang/test/Driver/config-file.c
+--- a/clang/test/Driver/config-file.c
++++ b/clang/test/Driver/config-file.c
+@@ -85,9 +85,9 @@
+ 
+ //--- The linker input flags should be moved to the end of input list and appear only when linking.
+ // RUN: %clang --target=aarch64-unknown-linux-gnu --config %S/Inputs/config-l.cfg %s -lmylib -Wl,foo.a -### 2>&1 | FileCheck %s -check-prefix CHECK-LINKING
+-// RUN: %clang --target=aarch64-unknown-linux-gnu --config %S/Inputs/config-l.cfg -fopenmp %s -lmylib -Wl,foo.a -### 2>&1 | FileCheck %s -check-prefix CHECK-LINKING-LIBOMP-GOES-AFTER
++// RUN: %clang --target=aarch64-unknown-linux-gnu --config %S/Inputs/config-l.cfg -fopenmp=libomp %s -lmylib -Wl,foo.a -### 2>&1 | FileCheck %s -check-prefix CHECK-LINKING-LIBOMP-GOES-AFTER
+ // RUN: %clang --target=aarch64-unknown-linux-gnu --config %S/Inputs/config-l.cfg -S %s -### 2>&1 | FileCheck %s -check-prefix CHECK-NOLINKING
+-// RUN: %clang --target=aarch64-unknown-linux-gnu --config %S/Inputs/config-l.cfg -fopenmp -S %s -### 2>&1 | FileCheck %s -check-prefix CHECK-NOLINKING-OPENMP
++// RUN: %clang --target=aarch64-unknown-linux-gnu --config %S/Inputs/config-l.cfg -fopenmp=libomp -S %s -### 2>&1 | FileCheck %s -check-prefix CHECK-NOLINKING-OPENMP
+ // RUN: %clang --target=x86_64-pc-windows-msvc    --config %S/Inputs/config-l.cfg %s -lmylib -Wl,foo.lib -### 2>&1 | FileCheck %s -check-prefix CHECK-LINKING-MSVC
+ // RUN: %clang --target=x86_64-pc-windows-msvc    --config %S/Inputs/config-l.cfg -S %s -### 2>&1 | FileCheck %s -check-prefix CHECK-NOLINKING-MSVC
+ // CHECK-LINKING: Configuration file: {{.*}}Inputs{{.}}config-l.cfg
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index 7c3347b..a6252bb 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -4,8 +4,8 @@ load("//third_party:repo.bzl", "tf_http_archive")
 
 def repo(name):
     """Imports LLVM."""
-    LLVM_COMMIT = "1d95825d4d168a17a4f27401dec3f2977a59a70e"
-    LLVM_SHA256 = "d3276c678b616c0d820fe14a3404b43591f4e1bc75b6bed2782e0776e0c9b401"
+    LLVM_COMMIT = "be2df95e9281985b61270bb6420ea0eeeffbbe59"
+    LLVM_SHA256 = "a92d032a2c93dc4fc252d76e95fee18590413e49f217106349044af76a2ba135"
 
     tf_http_archive(
         name = name,
